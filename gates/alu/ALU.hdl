// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a=x , b=false , sel=zx , out=n0 );
        Not16(in=n0 , out=n1 );
        Mux16(a=n0 , b=n1 , sel=nx , out=n2 );

        Mux16(a=y , b=false , sel=zy , out=p0 );
        Not16(in=p0 , out=p1 );
        Mux16(a=p0 , b=p1 , sel=ny , out=p2 );

        Add16(a = n2, b = p2, out = q0);
        And16(a= n2, b= p2, out= q1);
        Mux16(a=q1 , b=q0 , sel=f , out=q2);

        Not16(in=q2 , out=r0 );
        Mux16(a=q2 , b=r0 , sel=no , out=out, out[15]=ng, out[0..7]=zr1, out[8..15]=zr2);

        Or8Way(in=zr1 , out=zr3 );
        Or8Way(in=zr2 , out=zr4 );
        Or(a=zr3 , b=zr4 , out=zr5 );
        Not(in=zr5 , out=zr );



        







}